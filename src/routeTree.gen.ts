/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestIndexRouteImport } from './routes/test/index'
import { Route as SeoIndexRouteImport } from './routes/seo/index'

// Create/Update Routes

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const SeoIndexRoute = SeoIndexRouteImport.update({
  id: '/seo/',
  path: '/seo/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/seo/': {
      id: '/seo/'
      path: '/seo'
      fullPath: '/seo'
      preLoaderRoute: typeof SeoIndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/seo/index' {
  const createFileRoute: CreateFileRoute<
    '/seo/',
    FileRoutesByPath['/seo/']['parentRoute'],
    FileRoutesByPath['/seo/']['id'],
    FileRoutesByPath['/seo/']['path'],
    FileRoutesByPath['/seo/']['fullPath']
  >
}
declare module './routes/test/index' {
  const createFileRoute: CreateFileRoute<
    '/test/',
    FileRoutesByPath['/test/']['parentRoute'],
    FileRoutesByPath['/test/']['id'],
    FileRoutesByPath['/test/']['path'],
    FileRoutesByPath['/test/']['fullPath']
  >
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/seo': typeof SeoIndexRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/seo': typeof SeoIndexRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/seo/': typeof SeoIndexRoute
  '/test/': typeof TestIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/seo' | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/seo' | '/test'
  id: '__root__' | '/' | '/seo/' | '/test/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SeoIndexRoute: typeof SeoIndexRoute
  TestIndexRoute: typeof TestIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SeoIndexRoute: SeoIndexRoute,
  TestIndexRoute: TestIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/seo/",
        "/test/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/seo/": {
      "filePath": "seo/index.tsx"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
